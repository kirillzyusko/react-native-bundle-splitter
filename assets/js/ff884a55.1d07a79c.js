"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2268],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),g=i,d=m["".concat(l,".").concat(g)]||m[g]||u[g]||r;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3620:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:1},o="Navigation libraries integration",s={unversionedId:"guides/navigation",id:"version-1.x/guides/navigation",title:"Navigation libraries integration",description:"As was mentioned in the description of this library - you can easily split your bundle by navigation routes. And this library may be easily integrated with almost all navigation solutions. in this chapter we will have a look on the most popular solutions for navigation: react-navigation and react-native-navigation",source:"@site/versioned_docs/version-1.x/guides/navigation.md",sourceDirName:"guides",slug:"/guides/navigation",permalink:"/react-native-bundle-splitter/docs/1.x/guides/navigation",draft:!1,editUrl:"https://github.com/kirillzyusko/react-native-bundle-splitter/tree/master/docs/versioned_docs/version-1.x/guides/navigation.md",tags:[],version:"1.x",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/react-native-bundle-splitter/docs/1.x/category/guides"},next:{title:"Static options",permalink:"/react-native-bundle-splitter/docs/1.x/guides/static-options"}},l={},c=[{value:"Basic architecture",id:"basic-architecture",level:2},{value:"React Navigation integration",id:"react-navigation-integration",level:2},{value:"Before",id:"before",level:3},{value:"After",id:"after",level:3},{value:"React Native Navigation Integration",id:"react-native-navigation-integration",level:2},{value:"Before",id:"before-1",level:3},{value:"After",id:"after-1",level:3},{value:"Summary",id:"summary",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"navigation-libraries-integration"},"Navigation libraries integration"),(0,i.kt)("p",null,"As was mentioned in the description of this library - you can easily split your bundle by navigation routes. And this library may be easily integrated with almost all navigation solutions. in this chapter we will have a look on the most popular solutions for navigation: ",(0,i.kt)("a",{parentName:"p",href:"https://reactnavigation.org/"},"react-navigation")," and ",(0,i.kt)("a",{parentName:"p",href:"https://wix.github.io/react-native-navigation/#/"},"react-native-navigation")),(0,i.kt)("p",null,"Let's consider basic example with two screens. Let's assume we have the next application structure:"),(0,i.kt)("h2",{id:"basic-architecture"},"Basic architecture"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// home.ts\nimport React from 'react';\nimport { Button, View, Text } from 'react-native';\n\nclass HomeScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Home Screen</Text>\n        <Button\n          title=\"Go to Details\"\n          onPress={this.goToDetails}\n        />\n      </View>\n    );\n  }\n  \n  private goToDetails = () => {\n    // call specific function to perform navigation\n    // in case of `react-navigation`: this.props.navigation.navigate('Details')\n    // see routes definition below for each library\n  }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// details.ts\nimport React from 'react';\nimport { Button, View, Text } from 'react-native';\n\nclass DetailsScreen extends React.Component {\n  render() {\n    return (\n      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n        <Text>Details Screen</Text>\n        <Button\n          title=\"Go to Home... again\"\n          onPress={this.goToHome}\n        />\n      </View>\n    );\n  }\n  \n   private goToHome = () => {\n     // call specific function to perform navigation\n     // in case of `react-navigation`: this.props.navigation.navigate('Home')\n     // see routes definition below for each library\n   }\n}\n")),(0,i.kt)("h2",{id:"react-navigation-integration"},"React Navigation integration"),(0,i.kt)("p",null,"Your App container will be the same and there is no any changes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"// App.ts\nimport React from 'react';\nimport { createStackNavigator, createAppContainer } from 'react-navigation';\n\nimport { AppNavigator } from './navigator';\n\nconst AppContainer = createAppContainer(AppNavigator);\n\nexport default class App extends React.Component {\n  render() {\n    return <AppContainer />;\n  }\n}\n")),(0,i.kt)("p",null,"All changes will be only in route declaration."),(0,i.kt)("h3",{id:"before"},"Before"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// navigator.ts\nimport { createStackNavigator } from 'react-navigation';\n\nimport DetailsScreen from './details';\nimport HomeScreen from './home';\n\nexport const AppNavigator = createStackNavigator(\n  {\n    'Home': HomeScreen,\n    'Details': DetailsScreen\n  },\n  {\n    initialRouteName: 'Home'\n  }\n);\n")),(0,i.kt)("h3",{id:"after"},"After"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// navigator.ts\nimport { createStackNavigator } from 'react-navigation';\nimport { register } from 'react-native-bundle-splitter';\n\nexport const AppNavigator = createStackNavigator(\n  {\n    'Home': register({ require: () => require('./home') }),\n    'Details': register({ require: () => require('./details') })\n  },\n  {\n    initialRouteName: 'Home'\n  }\n);\n\n")),(0,i.kt)("h2",{id:"react-native-navigation-integration"},"React Native Navigation Integration"),(0,i.kt)("p",null,"Similarly to ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation")," you need only change declaration of your routes - just wrap all screens, that you want to postpone for loading in ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," function."),(0,i.kt)("h3",{id:"before-1"},"Before"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Navigation } from 'react-native-navigation';\n\nimport DetailsScreen from './details';\nimport HomeScreen from './home';\n\nNavigation.registerComponent('Home', () => HomeScreen);\nNavigation.registerComponent('Details', () => DetailsScreen);\n")),(0,i.kt)("h3",{id:"after-1"},"After"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Navigation } from 'react-native-navigation';\nimport { register } from 'react-native-bundle-splitter';\n\nconst DetailsScreen = register({ require: () => require('./details') });\nconst HomeScreen = register({ require: () => require('./home') });\n\nNavigation.registerComponent('Home', () => HomeScreen);\nNavigation.registerComponent('Details', () => DetailsScreen);\n")),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"As you saw in both cases (integration with ",(0,i.kt)("inlineCode",{parentName:"p"},"react-navigation")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"react-native-navigation"),") you just need to wrap your screens, that you want to postpone for loading, in ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," function."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"As you can see in this section we used ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," function directly in the navigation declaration, unlike ",(0,i.kt)("a",{parentName:"p",href:"/react-native-bundle-splitter/docs/1.x/fundamentals/basic-usage"},"Basic usage"),", where we used ",(0,i.kt)("inlineCode",{parentName:"p"},"register")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," file. You can choose which way is more preferable for you: use this HOC in the routes declaration or in ",(0,i.kt)("inlineCode",{parentName:"p"},"index")," files. No need to use it twice.")))}u.isMDXComponent=!0}}]);