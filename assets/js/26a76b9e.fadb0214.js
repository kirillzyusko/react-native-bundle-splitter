"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5163],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),f=o,m=d["".concat(s,".").concat(f)]||d[f]||c[f]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3470:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:4},a="Metro configuration updating",l={unversionedId:"guides/metro",id:"version-1.x/guides/metro",title:"Metro configuration updating",description:"Initial Configuration",source:"@site/versioned_docs/version-1.x/guides/metro.md",sourceDirName:"guides",slug:"/guides/metro",permalink:"/react-native-bundle-splitter/docs/1.x/guides/metro",draft:!1,editUrl:"https://github.com/kirillzyusko/react-native-bundle-splitter/tree/master/docs/versioned_docs/version-1.x/guides/metro.md",tags:[],version:"1.x",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Async loading",permalink:"/react-native-bundle-splitter/docs/1.x/guides/async-loading"},next:{title:"Recipes",permalink:"/react-native-bundle-splitter/docs/1.x/category/recipes"}},s={},u=[{value:"Initial Configuration",id:"initial-configuration",level:2},{value:"Metro Configuration",id:"metro-configuration",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"metro-configuration-updating"},"Metro configuration updating"),(0,o.kt)("h2",{id:"initial-configuration"},"Initial Configuration"),(0,o.kt)("p",null,"In order to see which files should be loaded on initial start of app you can use helper utility (use this code in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"+import { investigate } from 'react-native-bundle-splitter/dist/utils';\n\n+console.log(`module.exports = ${JSON.stringify(investigate().loaded.sort())};`);\n")),(0,o.kt)("p",null,"Then grab this text and put it in a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"packager/modules.ios.js")," (if you are running your app on iOS platform) or to ",(0,o.kt)("inlineCode",{parentName:"p"},"packager/modules.android.js")," (if you run Android app respectively)."),(0,o.kt)("h2",{id:"metro-configuration"},"Metro Configuration"),(0,o.kt)("p",null,"Then edit your ",(0,o.kt)("inlineCode",{parentName:"p"},"metro.config.js")," as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const resolve = require('path').resolve;\nconst fs = require('fs');\n\n// Update the following line if the root folder of your app is somewhere else.\nconst ROOT_FOLDER = resolve(__dirname, '.');\n\nconst config = {\n  transformer: {\n    getTransformOptions: (_, { platform }) => {\n      let modulePaths = [];\n      const moduleMap = {};\n\n      if (platform === 'android') {\n        modulePaths = require('./packager/modules.android');\n      } else {\n        modulePaths = require('./packager/modules.ios');\n      }\n\n      modulePaths.forEach(path => {\n        if (fs.existsSync(path)) {\n          moduleMap[resolve(path)] = true;\n        }\n      });\n\n      return {\n        preloadedModules: moduleMap,\n        transform: {\n          inlineRequires: {\n            // `blacklist` for RN < 0.64\n            blockList: moduleMap,\n          },\n        },\n      };\n    },\n  },\n  projectRoot: ROOT_FOLDER,\n};\n\nmodule.exports = config;\n")))}c.isMDXComponent=!0}}]);