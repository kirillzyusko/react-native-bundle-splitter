"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[865],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=i,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||a;return t?r.createElement(g,o(o({ref:n},p),{},{components:t})):r.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(7462),i=(t(7294),t(3905));const a={sidebar_position:3},o="Jest testing guide",l={unversionedId:"recipes/jest-testing-guide",id:"version-3.x/recipes/jest-testing-guide",title:"Jest testing guide",description:"This library doesn't require any mocks. However unit tests are running in Node.js runtime and dynamic import statement doesn't work out-of-box. To make your tests running again you'll need to add dynamic-import-node plugin for test environment and modify your babel.config.js or .babelrc files accordingly.",source:"@site/versioned_docs/version-3.x/recipes/jest-testing-guide.md",sourceDirName:"recipes",slug:"/recipes/jest-testing-guide",permalink:"/react-native-bundle-splitter/docs/recipes/jest-testing-guide",draft:!1,editUrl:"https://github.com/kirillzyusko/react-native-bundle-splitter/tree/master/docs/versioned_docs/version-3.x/recipes/jest-testing-guide.md",tags:[],version:"3.x",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Capturing startup time",permalink:"/react-native-bundle-splitter/docs/recipes/capturing-startup-time"},next:{title:"API reference",permalink:"/react-native-bundle-splitter/docs/category/api-reference"}},s={},d=[{value:"Installing new babel dependency",id:"installing-new-babel-dependency",level:2},{value:"Add plugin to babel config",id:"add-plugin-to-babel-config",level:2}],p={toc:d};function c(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"jest-testing-guide"},"Jest testing guide"),(0,i.kt)("p",null,"This library doesn't require any mocks. However unit tests are running in ",(0,i.kt)("inlineCode",{parentName:"p"},"Node.js")," runtime and dynamic import statement doesn't work out-of-box. To make your tests running again you'll need to add ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamic-import-node")," plugin for ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," environment and modify your ",(0,i.kt)("inlineCode",{parentName:"p"},"babel.config.js")," or ",(0,i.kt)("inlineCode",{parentName:"p"},".babelrc")," files accordingly."),(0,i.kt)("h2",{id:"installing-new-babel-dependency"},"Installing new babel dependency"),(0,i.kt)("p",null,"First of all you'll need to install ",(0,i.kt)("inlineCode",{parentName:"p"},"babel-plugin-dynamic-import-node")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"devDependencies"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add babel-plugin-dynamic-import-node --dev\n# or\n# npm install babel-plugin-dynamic-import-node --save-dev\n")),(0,i.kt)("h2",{id:"add-plugin-to-babel-config"},"Add plugin to babel config"),(0,i.kt)("p",null,"If you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"babel.config.js")," format, then you can add conditional statement to include ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamic-import-node")," plugin only for test environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// The plugin was added because jest can\'t use dynamic imports and was changing the imports and\n// final module had following shape { __esModule: true, default: RealModule }.\n// So, react-native-bundle-splitter can\'t resolve this import format.\nif (process.env.NODE_ENV === "test") {\n  config.plugins.push("dynamic-import-node");\n}\n')),(0,i.kt)("p",null,"If you are using ",(0,i.kt)("inlineCode",{parentName:"p"},"JSON")," format (i. e. ",(0,i.kt)("inlineCode",{parentName:"p"},".babelrc"),"), then you'll need to add plugin under ",(0,i.kt)("inlineCode",{parentName:"p"},"env.test")," key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "presets": ...\n    "plugins": [\n        ...\n    ],\n    "env": {\n        "test": {\n            "plugins": ["dynamic-import-node"]\n        }\n    }\n}\n')))}c.isMDXComponent=!0}}]);